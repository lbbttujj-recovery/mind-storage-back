//@ts-nocheck

import { Telegraf, Scenes, Markup, Context, session } from 'telegraf'
import { Stage } from 'telegraf/scenes'

import express from 'express'
import { OpenAI } from 'openai'
import cors from 'cors'
const dotenv = require('dotenv')
import Database, { getToday, dateToISOFormat } from './dataBase/dataBase'
dotenv.config()
import fs from 'fs'
import https from 'https'
import http from 'http'

const addMindScene = new Scenes.BaseScene<Scenes.SceneContext>('ADD_MIND')
const filterScene = new Scenes.BaseScene<Scenes.SceneContext>('FILTER')
const getScene = new Scenes.BaseScene<Scenes.SceneContext>('GET')

const bot = new Telegraf<MyContext>(process.env.TELEGRAM_TOKEN || '')
const db = new Database()
const PORT = 443

const options = {
  key: fs.readFileSync('/etc/letsencrypt/live/lbbttujj.ru/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/lbbttujj.ru/fullchain.pem'),
}

const app = express()
app.use(express.json())
app.use(cors())
const newMindStage = new Stage([addMindScene, filterScene, getScene])

bot.use(session())
// @ts-ignore
bot.use(newMindStage.middleware())

// 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Å—Å–∏–∏
interface SessionData {
  regData?: {
    name?: string
    age?: string
  }
}

// 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ü–µ–Ω
interface MyContext extends Context {
  session: SessionData
  scene: Scenes.SceneContextScene<any>
}

const mainKeyboard = Markup.inlineKeyboard([
  [Markup.button.callback('üé≤ –†–∞–Ω–¥–æ–º', 'random')],
  [Markup.button.callback('üîç –§–∏–ª—å—Ç—Ä', 'filter')],
  [Markup.button.callback('‚àÜ –ü–æ–ª—É—á–∏—Ç—å', 'get')],
  [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º—ã—Å–ª—å', 'add')],
])

filterScene
  .enter((ctx) => {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', Markup.keyboard(['–û—Ç–º–µ–Ω–∞']).resize())
  })
  .on('text', async (ctx) => {
    if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
      await ctx.reply('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', Markup.removeKeyboard())
      //@ts-ignore
      return ctx.scene.leave()
    }

    // –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    ctx.reply('–§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω', Markup.removeKeyboard())
    ctx.reply(ctx.text)
    //@ts-ignore
    ctx.scene.leave()
  })

addMindScene
  .enter((ctx) => {
    ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –º—ã—Å–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', Markup.keyboard(['–û—Ç–º–µ–Ω–∞']).resize())
  })
  .on('text', async (ctx) => {
    if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
      await ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', Markup.removeKeyboard())
      //@ts-ignore
      return ctx.scene.leave()
    }

    try {
      await db.addMindNotion(ctx.message.text)
      await ctx.reply('–ú—ã—Å–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', Markup.removeKeyboard())
    } catch (error) {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º—ã—Å–ª–∏', Markup.removeKeyboard())
      console.error(error)
    }
    //@ts-ignore
    ctx.scene.leave()
  })

getScene.enter(async (ctx) => {
  const buttons = [
    [{ text: '–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥', callback_data: 'period' }],
    [{ text: '–°–µ–≥–æ–¥–Ω—è', callback_data: 'today' }],
    [{ text: '–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é', callback_data: 'week' }],
    [{ text: '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è', callback_data: 'all' }],
    [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }],
  ]
  await ctx.sendChatAction('typing')
  await ctx.reply('–ö–∞–∫–∏–µ –∑–∞–ø–∏—Å–∏?', {
    reply_markup: {
      inline_keyboard: buttons,
    },
  })

  getScene.action(/back/, async (ctx) => {
    await ctx.scene.leave()
    await ctx.reply('–æ–∫, –µ—â–µ —Ä–∞–∑')
  })

  getScene.action(/today/, async (ctx) => {
    db.getAllMindsNotion({ from: getToday(), to: getToday() }).then((res) => {
      res.forEach((value) => {
        ctx.reply(value)
      })
    })
  })

  getScene.action(/week/, async (ctx) => {
    db.getAllMindsNotion({ from: dateToISOFormat(new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)), to: getToday() }).then((res) => {
      res.forEach((value) => {
        ctx.reply(value)
      })
    })
  })
})

getScene.action(/period/, async (ctx) => {
  await ctx.reply('–ü–æ–∫–∞ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç')
})

getScene.action(/all/, async (ctx) => {
  db.getAllMindsNotion().then((res) => {
    res.forEach((value) => {
      ctx.reply(value)
    })
  })
})

bot.on('text', (ctx) => {
  const { text } = ctx
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard)
})

bot.action('add', (ctx) => {
  ctx.scene.enter('ADD_MIND')
  ctx.answerCbQuery()
})

bot.action('filter', (ctx) => {
  ctx.scene.enter('FILTER')
  ctx.answerCbQuery()
})

bot.action('get', (ctx) => {
  ctx.scene.enter('GET')
  ctx.answerCbQuery()
})

bot.action('random', (ctx) => {
  db.getAllMindsNotion().then((res) => {
    const length = res.length - 1
    const firstRandom = Math.floor(Math.random() * length)
    let secondRandom = Math.floor(Math.random() * length)
    if (firstRandom === secondRandom) {
      for (let i = 0; i < 3; i++) {
        const currentRand = Math.floor(Math.random() * length)
        if (currentRand !== firstRandom) {
          secondRandom = currentRand
          break
        }
      }
    }
    ctx.reply(res[firstRandom])
    ctx.reply(res[secondRandom])
  })
})

bot.launch(() => {
  console.log('bot launch')
})

app.get('/items/random', (req, res) => {
  db.getAllMindsNotion().then((resolve) => {
    const length = resolve.length - 1
    const firstRandom = Math.floor(Math.random() * length)
    let secondRandom = Math.floor(Math.random() * length)
    if (firstRandom === secondRandom) {
      for (let i = 0; i < 3; i++) {
        const currentRand = Math.floor(Math.random() * length)
        if (currentRand !== firstRandom) {
          secondRandom = currentRand
          break
        }
      }
    }
    const result = [resolve[firstRandom], resolve[secondRandom]]

    res.json(result)
  })
})

app.get('/', (req, res) => {
  res.json('test')
})

app.get('/items', (req, res) => {
  const { period } = req.query
  let from
  let to
  if (period) {
    switch (period) {
      case 'week': {
        from = dateToISOFormat(new Date(Date.now() - 7 * 24 * 60 * 60 * 1000))
        to = getToday()
        break
      }
      case 'today': {
        from = getToday()
        to = getToday()
        break
      }
      default: {
        break
      }
    }
  }

  db.getAllMindsNotion({ to, from }).then((minds) => {
    res.json(minds)
  })
})

app.post('/items', (req, res) => {
  const { value } = req.body
  db.addMindNotion(value)
    .then(() => {
      res.json('success')
    })
    .catch((error) => {
      res.statusCode(500)
    })
})

app.get('/items/search', (req, res) => {
  const searchValue = req.query.q
  db.filterGptMindNotion(searchValue)
    .then((resolve) => {
      res.json(resolve)
    })
    .catch((error) => {
      res.statusCode(500)
    })
})

app.delete('/items', (req, res) => {
  const { id } = req.query
  db.deleteMindNotion(id)
    .then(() => {
      res.json('success')
    })
    .catch((error) => {
      res.statusCode(500)
    })
})

https.createServer(options, app).listen(PORT, () => {
  console.log(`HTTPS server running on port ${PORT}`)
})

// –†–µ–¥–∏—Ä–µ–∫—Ç HTTP ‚Üí HTTPS
http
  .createServer((req, res) => {
    res.writeHead(301, { Location: 'https://' + req.headers['host'] + req.url })
    res.end()
  })
  .listen(80)
